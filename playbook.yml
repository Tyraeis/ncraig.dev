- name: Deploy docker
  hosts: docker
  become: true

  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name:
          - docker.io
          - python3-docker
          - docker-compose
          - apparmor

    - name: Create users
      ansible.builtin.user:
        name: "{{ item.key }}"
        password: "!"
        uid: "{{ item.value.uid }}"
        groups: "{{ item.value.groups | default([]) }}"
      loop: "{{ users | dict2items }}"

    - name: Write docker config files
      ansible.builtin.template:
        src: ./config/{{ item.path }}.j2
        dest: '{{ dirs.docker }}/{{ item.path }}'
        mode: "{{ item.mode }}"
        owner: "{{ item.owner }}"
        group: "{{ item.owner }}"
      loop:
        - path: cloudflare.ini
          mode: '0440'
          owner: '{{ dockeruser }}'
        - path: enable_certbot.sh
          mode: '0775'
          owner: '{{ dockeruser }}'
        - path: ddclient.conf
          mode: '0600'
          owner: 911

    - name: Write docker-compose.yml
      ansible.builtin.template:
        src: ./docker-compose.yml
        dest: '{{ dirs.docker }}/docker-compose.yml'
        mode: "0440"
        owner: '{{ dockeruser }}'
        group: '{{ dockeruser }}'
      notify: Deploy docker

  handlers:
    - name: Deploy docker
      community.docker.docker_compose:
        project_src: '{{ dirs.docker }}'
        restarted: true


- name: Configure openmediavault
  hosts: omv
  become: true

  tasks:
    - name: Clear OMV variables
      ansible.builtin.lineinfile:
        path: /etc/default/openmediavault
        regexp: '^{{ item.key }}='
        state: absent
      loop: '{{ omv_variables | dict2items }}'
      when: 'item.value == "!"'
      notify: Apply OMV config

    - name: Set OMV variables
      ansible.builtin.lineinfile:
        path: /etc/default/openmediavault
        regexp: '^{{ item.key }}='
        line: '{{ item.key }}="{{ item.value }}"'
      loop: '{{ omv_variables | dict2items }}'
      when: 'item.value != "!"'
      notify: Apply OMV config

    - name: Set OMV port
      community.general.xml:
        path: /etc/openmediavault/config.xml
        xpath: /config/webadmin/port
        value: '{{ ports.omv }}'
      notify: Apply OMV config

    - name: Template nginx configs
      ansible.builtin.template:
        src: '{{ item }}'
        dest: '/{{ item | relpath }}'
        mode: "0444"
      with_fileglob:
        - 'etc/nginx/*'
        - 'etc/nginx/sites-available/*'
      notify: Reload nginx

    - name: Get currently active unwanted nginx sites
      ansible.builtin.find:
        paths: /etc/nginx/sites-enabled/
        excludes: '{{ enabled_sites + ["openmediavault-webgui"] }}'
      register: unwanted_sites

    - name: Disable unwanted nginx sites
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/{{ item.path }}
        state: absent
      loop: '{{ unwanted_sites.files }}'
      notify: Reload nginx

    - name: Enable nginx sites
      ansible.builtin.file:
        src: /etc/nginx/sites-available/{{ item }}
        dest: /etc/nginx/sites-enabled/{{ item }}
        state: link
      loop: "{{ enabled_sites }}"
      notify: Reload nginx

  handlers:
    - name: Apply OMV config
      ansible.builtin.shell: |
        monit restart omv-engined
        omv-salt stage run prepare
        omv-salt stage run deploy
      changed_when: true

    - name: Reload nginx
      ansible.builtin.shell: |
        nginx -s reload
      changed_when: true
